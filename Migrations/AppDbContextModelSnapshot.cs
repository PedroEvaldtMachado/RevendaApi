// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RevendaApi.Data;

#nullable disable

namespace RevendaApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RevendaApi.Models.Clientes.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("RevendaApi.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RevendaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("RevendaApi.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("RevendaApi.Models.Items.ItemEstoque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RevendaId");

                    b.ToTable("Estoques");
                });

            modelBuilder.Entity("RevendaApi.Models.Pedidos.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RevendaId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("RevendaApi.Models.Pedidos.PedidoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemEstoqueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusPedidoItem")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("PedidoItens");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.Revenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Revendas");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.RevendaContato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NomeDeContato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Principal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RevendaId");

                    b.ToTable("RevendaContatos");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.RevendaEndereco", b =>
                {
                    b.Property<Guid>("RevendaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uuid");

                    b.HasKey("RevendaId", "EnderecoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("RevendaId")
                        .IsUnique();

                    b.ToTable("RevendaEnderecos");
                });

            modelBuilder.Entity("RevendaApi.Models.Clientes.Cliente", b =>
                {
                    b.HasOne("RevendaApi.Models.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("RevendaApi.Models.Clientes.Cliente", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("RevendaApi.Models.Endereco", b =>
                {
                    b.HasOne("RevendaApi.Models.Revendas.Revenda", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("RevendaId");
                });

            modelBuilder.Entity("RevendaApi.Models.Items.ItemEstoque", b =>
                {
                    b.HasOne("RevendaApi.Models.Items.Item", "Item")
                        .WithMany("Estoques")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevendaApi.Models.Revendas.Revenda", null)
                        .WithMany()
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RevendaApi.Models.Pedidos.Pedido", b =>
                {
                    b.HasOne("RevendaApi.Models.Clientes.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevendaApi.Models.Revendas.Revenda", null)
                        .WithMany()
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RevendaApi.Models.Pedidos.PedidoItem", b =>
                {
                    b.HasOne("RevendaApi.Models.Pedidos.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.RevendaContato", b =>
                {
                    b.HasOne("RevendaApi.Models.Revendas.Revenda", "Revenda")
                        .WithMany("Contatos")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.RevendaEndereco", b =>
                {
                    b.HasOne("RevendaApi.Models.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("RevendaApi.Models.Revendas.RevendaEndereco", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevendaApi.Models.Revendas.Revenda", "Revenda")
                        .WithOne()
                        .HasForeignKey("RevendaApi.Models.Revendas.RevendaEndereco", "RevendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("RevendaApi.Models.Items.Item", b =>
                {
                    b.Navigation("Estoques");
                });

            modelBuilder.Entity("RevendaApi.Models.Pedidos.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("RevendaApi.Models.Revendas.Revenda", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("Enderecos");
                });
#pragma warning restore 612, 618
        }
    }
}
